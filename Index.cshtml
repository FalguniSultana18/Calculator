@{
    ViewData["Title"] = "Index";
}

<! DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">

    <link href="https://fonts.googleapis.com/css2?family=Cookie&display=swap" rel="stylesheet">

    <style>

        .calc-body {
            width: 275px;
            margin: auto;
            min-height: 400px;
            border: solid 1px #3A4655;
            box-shadow: 0 8px 50px -7px black;
        }

        .calc-button-row {
            width: 100%;
            background: #3C4857;
        }

        .button {
            width: 25%;
            background: #425062;
            color: #fff;
            padding: 20px;
            display: inline-block;
            font-size: 25px;
            text-align: center;
            vertical-align: middle;
            margin-right: -4px;
            border-right: solid 2px #3C4857;
            border-bottom: solid 2px #3C4857;
            transition: all 0.2s ease-in-out;
            border: none;
        }

            .button.l {
                color: #AEB3BA;
                background: #404D5E;
                border: none;
            }

            .button.c {
                color: #D95D4E;
                background: #404D5E;
                border: none;
            }

            .button:hover {
                background: #A0B7CF;
                transform: rotate(0deg);
                border: none;
            }

            .button.c:hover {
                background: #E0B612;
                color: #fff;
                border: none;
            }

            .button.c:focus {
                border: none;
                outline: none;
            }

            .button.l:hover {
                background: #E0B612;
                color: #fff;
                border: none;
            }

            .button.l:focus {
                outline: none;
                border: none;
            }
            .button:focus {
                outline: none;
                border: none;
            }

        .blink-me {
            color: #E0B612;
        }


        .title:hover {
            background: #E0B612;
            color: #fff;
        }



        input[type=button] {
            width: 60px;
            height: 60px;
            float: left;
            padding: 0;
            margin: 5px;
            box-sizing: border-box;
            background: #ecedef;
            border: none;
            font-size: 30px;
            line-height: 30px;
            border-radius: 50%;
            font-weight: 700;
            color: #5E5858;
            cursor: pointer;
        }

        input[type=text] {
            width: 270px;
            height: 60px;
            float: left;
            padding: 0;
            box-sizing: border-box;
            border: none;
            background: none;
            color: red;
            text-align: right;
            font-weight: 700;
            font-size: 60px;
            line-height: 60px;
            margin: 0 25px;
        }

        .calculator {
            background-color: #c0c0c0;
            box-shadow: 0px 0px 0px 10px #666;
            border: 5px solid black;
            border-radius: 10px;
        }

        .output {
            grid-column: 1 / -1;
            background-color: #3A4655;
            display: flex;
            align-items: flex-end;
            justify-content: space-around;
            flex-direction: column;
            padding: 10px;
            word-wrap: break-word;
            word-break: break-all;
            display: block !important;
            min-width: 120px;
            min-height: 70px;
        }

            .output .previous-operand {
                color: rgba(255, 255, 255, .75);
                font-size: 1.5rem;
                display: block !important;
                min-width: 120px;
                min-height: 70px;
            }

            .output .current-operand {
                color: white;
                font-size: 2.5rem;
                display: block !important;
                min-width: 120px;
                min-height: 70px;
            }

        .unstyled-button {
            border: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="calc-body">

            <div class="output">
                <div data-previous-operand class="previous-operand">&nbsp;</div>
                <div data-current-operand class="current-operand">&nbsp;</div>
            </div>
            <div class="calc-button-row">
                <button data-all-clear class="button c"> AC </button>
                <button data-delete class="button c"> C </button>
                <button data-operation class="button l"> ^ </button>
                <button data-operation class="button l"> % </button>

            </div>
            <div class="calc-button-row">
                <button data-number class="button"> 7 </button>
                <button data-number class="button"> 8 </button>
                <button data-number class="button"> 9 </button>
                <button data-operation class="button l"> / </button>

            </div>
            <div class="calc-button-row">
                <button data-number class="button"> 4 </button>
                <button data-number class="button"> 5 </button>
                <button data-number class="button"> 6 </button>
                <button data-operation class="button l"> x </button>
            </div>
            <div class="calc-button-row">
                <button data-number class="button"> 1 </button>
                <button data-number class="button"> 2 </button>
                <button data-number class="button"> 3 </button>
                <button data-operation class="button l"> - </button>
            </div>
            <div class="calc-button-row">
                <button data-number class="button"> . </button>
                <button data-number class="button"> 0 </button>

                <button data-equals class="button l"> = </button>
                <button data-operation class="button l"> + </button>

            </div>
        </div>
    </div>
</body>
</html>

<SCRIPT type="text/javascript">
    class Calculator {
      constructor(previousOperandTextElement, currentOperandTextElement) {
        this.previousOperandTextElement = previousOperandTextElement
        this.currentOperandTextElement = currentOperandTextElement
        this.clear()
      }

      clear() {
        this.currentOperand = ''
        this.previousOperand = ''
        this.operation = undefined
      }

      delete() {
        this.currentOperand = this.currentOperand.toString().slice(0, -1)
      }

      appendNumber(number) {
        if (number === '.' && this.currentOperand.includes('.')) return
        this.currentOperand = this.currentOperand.toString() + number.toString()
      }

      chooseOperation(operation) {
        if (this.currentOperand === '') return
        if (this.previousOperand !== '') {
          this.compute()
        }
        this.operation = operation
        this.previousOperand = this.currentOperand
        this.currentOperand = ''
      }

      compute() {
        let computation
        const prev = parseFloat(this.previousOperand)
        const current = parseFloat(this.currentOperand)
        if (isNaN(prev) || isNaN(current)) return
        switch (this.operation) {
          case '+':
            computation = prev + current
            break
          case '-':
            computation = prev - current
            break
          case 'x':
            computation = prev * current
            break
          case '/':
            computation = prev / current
            break
          case '%':
            computation = prev % current
            break
          case '^':
            computation = prev ^ current
            break
          default:
            return
        }
        this.currentOperand = computation
        this.operation = undefined
        this.previousOperand = ''
      }

      getDisplayNumber(number) {
        const stringNumber = number.toString()
        const integerDigits = parseFloat(stringNumber.split('.')[0])
        const decimalDigits = stringNumber.split('.')[1]
        let integerDisplay
        if (isNaN(integerDigits)) {
          integerDisplay = ' '
        } else {
          integerDisplay = integerDigits.toLocaleString('en', { maximumFractionDigits: 0 })
        }
        if (decimalDigits != null) {
          return `${integerDisplay}.${decimalDigits}`
        } else {
          return integerDisplay
        }
      }

      updateDisplay() {
        this.currentOperandTextElement.innerText =
          this.getDisplayNumber(this.currentOperand)
        if (this.operation != null) {
          this.previousOperandTextElement.innerText =
            `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`
        } else {
          this.previousOperandTextElement.innerText = ' '
        }
      }
    }


    const numberButtons = document.querySelectorAll('[data-number]')
    const operationButtons = document.querySelectorAll('[data-operation]')
    const equalsButton = document.querySelector('[data-equals]')
    const deleteButton = document.querySelector('[data-delete]')
    const allClearButton = document.querySelector('[data-all-clear]')
    const previousOperandTextElement = document.querySelector('[data-previous-operand]')
    const currentOperandTextElement = document.querySelector('[data-current-operand]')

    const calculator = new Calculator(previousOperandTextElement, currentOperandTextElement)

    numberButtons.forEach(button => {
      button.addEventListener('click', () => {
        calculator.appendNumber(button.innerText)
        calculator.updateDisplay()
      })
    })

    operationButtons.forEach(button => {
      button.addEventListener('click', () => {
        calculator.chooseOperation(button.innerText)
        calculator.updateDisplay()
      })
    })

    equalsButton.addEventListener('click', button => {
      calculator.compute()
      calculator.updateDisplay()
    })

    allClearButton.addEventListener('click', button => {
      calculator.clear()
      calculator.updateDisplay()
    })

    deleteButton.addEventListener('click', button => {
      calculator.delete()
      calculator.updateDisplay()
    })
</SCRIPT>
